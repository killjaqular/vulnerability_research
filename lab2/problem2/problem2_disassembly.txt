/*
Type: ELF
Platform: linux-x86_64
Architecture: x86_64

Libraries: 
  libc.so.6

Segments:
r--  0x00000000-0x000005f8 
r-x  0x00001000-0x0000123d 
r--  0x00002000-0x000021d0 
rw-  0x00003de8-0x00004048 
---  0x00004050-0x00004090 

Sections:
0x000002a8-0x000002c4  .interp (PROGBITS)  {Read-only data}
0x000002c4-0x000002e8  .note.gnu.build-id (NOTE)  {Read-only data}
0x000002e8-0x00000308  .note.ABI-tag (NOTE)  {Read-only data}
0x00000308-0x0000032c  .gnu.hash  {Read-only data}
0x00000330-0x00000408  .dynsym (DYNSYM)  {Read-only data}
0x00000408-0x000004aa  .dynstr (STRTAB)  {Read-only data}
0x000004aa-0x000004bc  .gnu.version  {Read-only data}
0x000004c0-0x000004f0  .gnu.version_r  {Read-only data}
0x000004f0-0x000005b0  .rela.dyn (RELA)  {Read-only data}
0x000005b0-0x000005f8  .rela.plt (RELA)  {Read-only data}
0x00001000-0x00001017  .init (PROGBITS)  {Code}
0x00001020-0x00001060  .plt (PROGBITS)  {Code}
0x00001060-0x00001068  .plt.got (PROGBITS)  {Code}
0x00001070-0x00001231  .text (PROGBITS)  {Code}
0x00001234-0x0000123d  .fini (PROGBITS)  {Code}
0x00002000-0x00002086  .rodata (PROGBITS)  {Read-only data}
0x00002088-0x000020c4  .eh_frame_hdr (PROGBITS)  {Read-only data}
0x000020c8-0x000021d0  .eh_frame (PROGBITS)  {Read-only data}
0x00003de8-0x00003df0  .init_array  {Writable data}
0x00003df0-0x00003df8  .fini_array  {Writable data}
0x00003df8-0x00003fd8  .dynamic (DYNAMIC)  {Read-only data}
0x00003fd8-0x00004000  .got (PROGBITS)  {Read-only data}
0x00004000-0x00004030  .got.plt (PROGBITS)  {Writable data}
0x00004030-0x00004040  .data (PROGBITS)  {Writable data}
0x00004040-0x00004048  .bss (NOBITS)  {Writable data}
0x00004050-0x00004090  .extern  {External}
*/
00000000  struct Elf64_Header __elf_header = 
00000000  {
00000000      struct Elf64_Ident ident = 
00000000      {
00000000          char signature[0x4] = "\x7fELF"
00000004          uint8_t file_class = 0x2
00000005          uint8_t encoding = 0x1
00000006          uint8_t version = 0x1
00000007          uint8_t os = 0x0
00000008          uint8_t abi_version = 0x0
00000009          char pad[0x7] = "\x00\x00\x00\x00\x00\x00", 0
00000010      }
00000010      enum e_type type = ET_DYN
00000012      enum e_machine machine = EM_X86_64
00000014      uint32_t version = 0x1
00000018      void (* entry)() = _start
00000020      uint64_t program_header_offset = 0x40
00000028      uint64_t section_header_offset = 0x3a48
00000030      uint32_t flags = 0x0
00000034      uint16_t header_size = 0x40
00000036      uint16_t program_header_size = 0x38
00000038      uint16_t program_header_count = 0xb
0000003a      uint16_t section_header_size = 0x40
0000003c      uint16_t section_header_count = 0x1e
0000003e      uint16_t string_table = 0x1d
00000040  }
00000040  struct Elf64_ProgramHeader __elf_program_headers[0xb] = 
00000040  {
00000040      [0x0] = 
00000040      {
00000040          enum p_type type = PT_PHDR
00000044          enum p_flags flags = PF_R
00000048          uint64_t offset = 0x40
00000050          uint64_t virtual_address = 0x40
00000058          uint64_t physical_address = 0x40
00000060          uint64_t file_size = 0x268
00000068          uint64_t memory_size = 0x268
00000070          uint64_t align = 0x8
00000078      }
00000078      [0x1] = 
00000078      {
00000078          enum p_type type = PT_INTERP
0000007c          enum p_flags flags = PF_R
00000080          uint64_t offset = 0x2a8
00000088          uint64_t virtual_address = 0x2a8
00000090          uint64_t physical_address = 0x2a8
00000098          uint64_t file_size = 0x1c
000000a0          uint64_t memory_size = 0x1c
000000a8          uint64_t align = 0x1
000000b0      }
000000b0      [0x2] = 
000000b0      {
000000b0          enum p_type type = PT_LOAD
000000b4          enum p_flags flags = PF_R
000000b8          uint64_t offset = 0x0
000000c0          uint64_t virtual_address = 0x0
000000c8          uint64_t physical_address = 0x0
000000d0          uint64_t file_size = 0x5f8
000000d8          uint64_t memory_size = 0x5f8
000000e0          uint64_t align = 0x1000
000000e8      }
000000e8      [0x3] = 
000000e8      {
000000e8          enum p_type type = PT_LOAD
000000ec          enum p_flags flags = PF_X | PF_R
000000f0          uint64_t offset = 0x1000
000000f8          uint64_t virtual_address = 0x1000
00000100          uint64_t physical_address = 0x1000
00000108          uint64_t file_size = 0x23d
00000110          uint64_t memory_size = 0x23d
00000118          uint64_t align = 0x1000
00000120      }
00000120      [0x4] = 
00000120      {
00000120          enum p_type type = PT_LOAD
00000124          enum p_flags flags = PF_R
00000128          uint64_t offset = 0x2000
00000130          uint64_t virtual_address = 0x2000
00000138          uint64_t physical_address = 0x2000
00000140          uint64_t file_size = 0x1d0
00000148          uint64_t memory_size = 0x1d0
00000150          uint64_t align = 0x1000
00000158      }
00000158      [0x5] = 
00000158      {
00000158          enum p_type type = PT_LOAD
0000015c          enum p_flags flags = PF_W | PF_R
00000160          uint64_t offset = 0x2de8
00000168          uint64_t virtual_address = 0x3de8
00000170          uint64_t physical_address = 0x3de8
00000178          uint64_t file_size = 0x258
00000180          uint64_t memory_size = 0x260
00000188          uint64_t align = 0x1000
00000190      }
00000190      [0x6] = 
00000190      {
00000190          enum p_type type = PT_DYNAMIC
00000194          enum p_flags flags = PF_W | PF_R
00000198          uint64_t offset = 0x2df8
000001a0          uint64_t virtual_address = 0x3df8
000001a8          uint64_t physical_address = 0x3df8
000001b0          uint64_t file_size = 0x1e0
000001b8          uint64_t memory_size = 0x1e0
000001c0          uint64_t align = 0x8
000001c8      }
000001c8      [0x7] = 
000001c8      {
000001c8          enum p_type type = PT_NOTE
000001cc          enum p_flags flags = PF_R
000001d0          uint64_t offset = 0x2c4
000001d8          uint64_t virtual_address = 0x2c4
000001e0          uint64_t physical_address = 0x2c4
000001e8          uint64_t file_size = 0x44
000001f0          uint64_t memory_size = 0x44
000001f8          uint64_t align = 0x4
00000200      }
00000200      [0x8] = 
00000200      {
00000200          enum p_type type = PT_GNU_EH_FRAME
00000204          enum p_flags flags = PF_R
00000208          uint64_t offset = 0x2088
00000210          uint64_t virtual_address = 0x2088
00000218          uint64_t physical_address = 0x2088
00000220          uint64_t file_size = 0x3c
00000228          uint64_t memory_size = 0x3c
00000230          uint64_t align = 0x4
00000238      }
00000238      [0x9] = 
00000238      {
00000238          enum p_type type = PT_GNU_STACK
0000023c          enum p_flags flags = PF_W | PF_R
00000240          uint64_t offset = 0x0
00000248          uint64_t virtual_address = 0x0
00000250          uint64_t physical_address = 0x0
00000258          uint64_t file_size = 0x0
00000260          uint64_t memory_size = 0x0
00000268          uint64_t align = 0x10
00000270      }
00000270      [0xa] = 
00000270      {
00000270          enum p_type type = PT_GNU_RELRO
00000274          enum p_flags flags = PF_R
00000278          uint64_t offset = 0x2de8
00000280          uint64_t virtual_address = 0x3de8
00000288          uint64_t physical_address = 0x3de8
00000290          uint64_t file_size = 0x218
00000298          uint64_t memory_size = 0x218
000002a0          uint64_t align = 0x1
000002a8      }
000002a8  }

.interp (PROGBITS) section started  {0x2a8-0x2c4}
000002a8  char __elf_interp[0x1c] = "/lib64/ld-linux-x86-64.so.2", 0
.interp (PROGBITS) section ended  {0x2a8-0x2c4}

.note.gnu.build-id (NOTE) section started  {0x2c4-0x2e8}
000002c4              04 00 00 00      ....
000002c8  14 00 00 00 03 00 00 00  ........
000002d0  47 4e 55 00 ee c6 6a 0f  GNU...j.
000002d8  0f d9 6c 9a 1c 68 78 43  ..l..hxC
000002e0  41 ee 2b d9 b0 d3 cc c4  A.+.....
.note.gnu.build-id (NOTE) section ended  {0x2c4-0x2e8}

.note.ABI-tag (NOTE) section started  {0x2e8-0x308}
000002e8  __abi_tag:
000002e8  04 00 00 00 10 00 00 00  ........
000002f0  01 00 00 00 47 4e 55 00  ....GNU.
000002f8  00 00 00 00 03 00 00 00  ........
00000300  02 00 00 00 00 00 00 00  ........
.note.ABI-tag (NOTE) section ended  {0x2e8-0x308}

.gnu.hash section started  {0x308-0x32c}
00000308  02 00 00 00 08 00 00 00  ........
00000310  01 00 00 00 06 00 00 00  ........
00000318  00 00 81 00 00 00 00 00  ........
00000320  08 00 00 00 00 00 00 00  ........
00000328  d1 65 ce 6d              .e.m
.gnu.hash section ended  {0x308-0x32c}

0000032c              00 00 00 00      ....

.dynsym (DYNSYM) section started  {0x330-0x408}
00000330  struct Elf64_Sym __elf_symbol_table[0x9] = 
00000330  {
00000330      [0x0] = 
00000330      {
00000330          uint32_t st_name = 0x0
00000334          uint8_t st_info = 0x0
00000335          uint8_t st_other = 0x0
00000336          uint16_t st_shndx = 0x0
00000338          uint64_t st_value = 0x0
00000340          uint64_t st_size = 0x0
00000348      }
00000348      [0x1] = 
00000348      {
00000348          uint32_t st_name = 0x5d
0000034c          uint8_t st_info = 0x20
0000034d          uint8_t st_other = 0x0
0000034e          uint16_t st_shndx = 0x0
00000350          uint64_t st_value = 0x0
00000358          uint64_t st_size = 0x0
00000360      }
00000360      [0x2] = 
00000360      {
00000360          uint32_t st_name = 0x10
00000364          uint8_t st_info = 0x12
00000365          uint8_t st_other = 0x0
00000366          uint16_t st_shndx = 0x0
00000368          uint64_t st_value = 0x0
00000370          uint64_t st_size = 0x0
00000378      }
00000378      [0x3] = 
00000378      {
00000378          uint32_t st_name = 0x15
0000037c          uint8_t st_info = 0x12
0000037d          uint8_t st_other = 0x0
0000037e          uint16_t st_shndx = 0x0
00000380          uint64_t st_value = 0x0
00000388          uint64_t st_size = 0x0
00000390      }
00000390      [0x4] = 
00000390      {
00000390          uint32_t st_name = 0x2b
00000394          uint8_t st_info = 0x12
00000395          uint8_t st_other = 0x0
00000396          uint16_t st_shndx = 0x0
00000398          uint64_t st_value = 0x0
000003a0          uint64_t st_size = 0x0
000003a8      }
000003a8      [0x5] = 
000003a8      {
000003a8          uint32_t st_name = 0x79
000003ac          uint8_t st_info = 0x20
000003ad          uint8_t st_other = 0x0
000003ae          uint16_t st_shndx = 0x0
000003b0          uint64_t st_value = 0x0
000003b8          uint64_t st_size = 0x0
000003c0      }
000003c0      [0x6] = 
000003c0      {
000003c0          uint32_t st_name = 0x1
000003c4          uint8_t st_info = 0x12
000003c5          uint8_t st_other = 0x0
000003c6          uint16_t st_shndx = 0x0
000003c8          uint64_t st_value = 0x0
000003d0          uint64_t st_size = 0x0
000003d8      }
000003d8      [0x7] = 
000003d8      {
000003d8          uint32_t st_name = 0x88
000003dc          uint8_t st_info = 0x20
000003dd          uint8_t st_other = 0x0
000003de          uint16_t st_shndx = 0x0
000003e0          uint64_t st_value = 0x0
000003e8          uint64_t st_size = 0x0
000003f0      }
000003f0      [0x8] = 
000003f0      {
000003f0          uint32_t st_name = 0x1c
000003f4          uint8_t st_info = 0x22
000003f5          uint8_t st_other = 0x0
000003f6          uint16_t st_shndx = 0x0
000003f8          uint64_t st_value = 0x0
00000400          uint64_t st_size = 0x0
00000408      }
00000408  }
.dynsym (DYNSYM) section ended  {0x330-0x408}

.dynstr (STRTAB) section started  {0x408-0x4aa}
00000408  00                       .

00000409  char data_409[0xf] = "__isoc99_scanf", 0
00000418  char data_418[0x5] = "puts", 0
0000041d  char data_41d[0x7] = "printf", 0
00000424  char data_424[0xf] = "__cxa_finalize", 0
00000433  char data_433[0x12] = "__libc_start_main", 0
00000445  char data_445[0xa] = "libc.so.6", 0
0000044f  char data_44f[0xa] = "GLIBC_2.7", 0
00000459  char data_459[0xc] = "GLIBC_2.2.5", 0
00000465  char data_465[0x1c] = "_ITM_deregisterTMCloneTable", 0
00000481  char data_481[0xf] = "__gmon_start__", 0
00000490  char data_490[0x1a] = "_ITM_registerTMCloneTable", 0
.dynstr (STRTAB) section ended  {0x408-0x4aa}

.gnu.version section started  {0x4aa-0x4bc}
000004aa        00 00 00 00 02 00    ......
000004b0  02 00 02 00 00 00 03 00  ........
000004b8  00 00 02 00              ....
.gnu.version section ended  {0x4aa-0x4bc}

000004bc              00 00 00 00      ....

.gnu.version_r section started  {0x4c0-0x4f0}
000004c0  01 00 02 00 3d 00 00 00  ....=...
000004c8  10 00 00 00 00 00 00 00  ........
000004d0  17 69 69 0d 00 00 03 00  .ii.....
000004d8  47 00 00 00 10 00 00 00  G.......
000004e0  75 1a 69 09 00 00 02 00  u.i.....
000004e8  51 00 00 00 00 00 00 00  Q.......
.gnu.version_r section ended  {0x4c0-0x4f0}

.rela.dyn (RELA) section started  {0x4f0-0x5b0}
000004f0  e8 3d 00 00 00 00 00 00  .=......
000004f8  08 00 00 00 00 00 00 00  ........
00000500  50 11 00 00 00 00 00 00  P.......
00000508  f0 3d 00 00 00 00 00 00  .=......
00000510  08 00 00 00 00 00 00 00  ........
00000518  10 11 00 00 00 00 00 00  ........
00000520  38 40 00 00 00 00 00 00  8@......
00000528  08 00 00 00 00 00 00 00  ........
00000530  38 40 00 00 00 00 00 00  8@......
00000538  d8 3f 00 00 00 00 00 00  .?......
00000540  06 00 00 00 01 00 00 00  ........
00000548  00 00 00 00 00 00 00 00  ........
00000550  e0 3f 00 00 00 00 00 00  .?......
00000558  06 00 00 00 04 00 00 00  ........
00000560  00 00 00 00 00 00 00 00  ........
00000568  e8 3f 00 00 00 00 00 00  .?......
00000570  06 00 00 00 05 00 00 00  ........
00000578  00 00 00 00 00 00 00 00  ........
00000580  f0 3f 00 00 00 00 00 00  .?......
00000588  06 00 00 00 07 00 00 00  ........
00000590  00 00 00 00 00 00 00 00  ........
00000598  f8 3f 00 00 00 00 00 00  .?......
000005a0  06 00 00 00 08 00 00 00  ........
000005a8  00 00 00 00 00 00 00 00  ........
.rela.dyn (RELA) section ended  {0x4f0-0x5b0}

.rela.plt (RELA) section started  {0x5b0-0x5f8}
000005b0  18 40 00 00 00 00 00 00  .@......
000005b8  07 00 00 00 02 00 00 00  ........
000005c0  00 00 00 00 00 00 00 00  ........
000005c8  20 40 00 00 00 00 00 00   @......
000005d0  07 00 00 00 03 00 00 00  ........
000005d8  00 00 00 00 00 00 00 00  ........
000005e0  28 40 00 00 00 00 00 00  (@......
000005e8  07 00 00 00 06 00 00 00  ........
000005f0  00 00 00 00 00 00 00 00  ........
.rela.plt (RELA) section ended  {0x5b0-0x5f8}

.init (PROGBITS) section started  {0x1000-0x1017}

00001000  void _init()

00001000  4883ec08           sub     rsp, 0x8
00001004  488b05dd2f0000     mov     rax, qword [rel __gmon_start__]
0000100b  4885c0             test    rax, rax
0000100e  7402               je      0x1012

00001010  ffd0               call    rax

00001012  4883c408           add     rsp, 0x8
00001016  c3                 retn     {__return_addr}

.init (PROGBITS) section ended  {0x1000-0x1017}

00001017                       00         .
00001018  00 00 00 00 00 00 00 00  ........

.plt (PROGBITS) section started  {0x1020-0x1060}

{ Continuation of function sub_1036 }

00001020  ff35e22f0000       push    qword [rel data_4008] {var_10}
00001026  ff25e42f0000       jmp     qword [rel data_4010]

0000102c              0f 1f 40 00      ..@.

00001030  int32_t puts(char const* str)

00001030  ff25e22f0000       jmp     qword [rel puts]


00001036  int64_t sub_1036()

00001036  6800000000         push    0x0 {var_8}
0000103b  e9e0ffffff         jmp     0x1020


00001040  int32_t printf(char const* format, ...)

00001040  ff25da2f0000       jmp     qword [rel printf]

00001046                    68 01        h.
00001048  00 00 00 e9 d0 ff ff ff  ........

00001050  int32_t __isoc99_scanf(char const* format, ...)

00001050  ff25d22f0000       jmp     qword [rel __isoc99_scanf]

00001056                    68 02        h.
00001058  00 00 00 e9 c0 ff ff ff  ........
.plt (PROGBITS) section ended  {0x1020-0x1060}

.plt.got (PROGBITS) section started  {0x1060-0x1068}

00001060  void __cxa_finalize(void* d)

00001060  ff25922f0000       jmp     qword [rel __cxa_finalize]

00001066                    66 90        f.
.plt.got (PROGBITS) section ended  {0x1060-0x1068}

00001068  00 00 00 00 00 00 00 00  ........

.text (PROGBITS) section started  {0x1070-0x1231}

00001070  int64_t _start(int64_t arg1, int64_t arg2, void (* arg3)()) __noreturn

00001070  31ed               xor     ebp, ebp  {0x0}
00001072  4989d1             mov     r9, rdx
00001075  5e                 pop     rsi {__return_addr}
00001076  4889e2             mov     rdx, rsp {arg_8}
00001079  4883e4f0           and     rsp, 0xfffffffffffffff0
0000107d  50                 push    rax {var_8}
0000107e  54                 push    rsp {var_8} {var_10}
0000107f  4c8d05aa010000     lea     r8, [rel __libc_csu_fini]
00001086  488d0d43010000     lea     rcx, [rel __libc_csu_init]
0000108d  488d3dc1000000     lea     rdi, [rel main]
00001094  ff15462f0000       call    qword [rel __libc_start_main]
{ Does not return }

0000109a        f4 0f 1f 44 00 00    ...D..

000010a0  void deregister_tm_clones()

000010a0  488d3d992f0000     lea     rdi, [rel __TMC_END__]
000010a7  488d05922f0000     lea     rax, [rel __TMC_END__]
000010ae  4839f8             cmp     rax, rdi
000010b1  7415               je      0x10c8  {0x1}

000010b3  488b051e2f0000     mov     rax, qword [rel _ITM_deregisterTMCloneTable]
000010ba  4885c0             test    rax, rax
000010bd  7409               je      0x10c8

000010bf  ffe0               jmp     rax

000010c1     0f 1f 80 00 00 00 00   .......

000010c8  c3                 retn     {__return_addr}

000010c9     0f 1f 80 00 00 00 00   .......

000010d0  void register_tm_clones()

000010d0  488d3d692f0000     lea     rdi, [rel __TMC_END__]
000010d7  488d35622f0000     lea     rsi, [rel __TMC_END__]
000010de  4829fe             sub     rsi, rdi
000010e1  4889f0             mov     rax, rsi
000010e4  48c1ee3f           shr     rsi, 0x3f
000010e8  48c1f803           sar     rax, 0x3
000010ec  4801c6             add     rsi, rax
000010ef  48d1fe             sar     rsi, 0x1
000010f2  7414               je      0x1108  {0x1}

000010f4  488b05f52e0000     mov     rax, qword [rel _ITM_registerTMCloneTable]
000010fb  4885c0             test    rax, rax
000010fe  7408               je      0x1108

00001100  ffe0               jmp     rax

00001102        66 0f 1f 44 00 00    f..D..

00001108  c3                 retn     {__return_addr}

00001109     0f 1f 80 00 00 00 00   .......

00001110  void __do_global_dtors_aux()

00001110  803d292f000000     cmp     byte [rel __TMC_END__], 0x0
00001117  752f               jne     0x1148  {__TMC_END__}

00001119  55                 push    rbp {__saved_rbp}
0000111a  48833dd62e000000   cmp     qword [rel __cxa_finalize], 0x0
00001122  4889e5             mov     rbp, rsp {__saved_rbp}
00001125  740c               je      0x1133

00001127  488b3d0a2f0000     mov     rdi, qword [rel __dso_handle]
0000112e  e82dffffff         call    __cxa_finalize

00001133  e868ffffff         call    deregister_tm_clones
00001138  c605012f000001     mov     byte [rel __TMC_END__], 0x1
0000113f  5d                 pop     rbp {__saved_rbp}
00001140  c3                 retn     {__return_addr}

00001141     0f 1f 80 00 00 00 00   .......

00001148  c3                 retn     {__return_addr}

00001149     0f 1f 80 00 00 00 00   .......

00001150  int64_t frame_dummy()

00001150  e97bffffff         jmp     register_tm_clones


00001155  int32_t main(int32_t argc, char** argv, char** envp)

00001155  55                 push    rbp {__saved_rbp}
00001156  4889e5             mov     rbp, rsp {__saved_rbp}
00001159  4883ec10           sub     rsp, 0x10
0000115d  488d3da40e0000     lea     rdi, [rel data_2008]  {"Enter a number greater than 1,00…"}
00001164  b800000000         mov     eax, 0x0
00001169  e8d2feffff         call    printf
0000116e  488d45f8           lea     rax, [rbp-0x8 {var_10}]
00001172  4889c6             mov     rsi, rax {var_10}
00001175  488d3dea0e0000     lea     rdi, [rel data_2066]
0000117c  b800000000         mov     eax, 0x0
00001181  e8cafeffff         call    __isoc99_scanf
00001186  488b45f8           mov     rax, qword [rbp-0x8 {var_10}]
0000118a  4889c6             mov     rsi, rax
0000118d  488d3dd50e0000     lea     rdi, [rel data_2069]  {"flag = %d\n"}
00001194  b800000000         mov     eax, 0x0
00001199  e8a2feffff         call    printf
0000119e  488b45f8           mov     rax, qword [rbp-0x8 {var_10}]
000011a2  483de8030000       cmp     rax, 0x3e8
000011a8  760e               jbe     0x11b8

000011aa  488d3dc30e0000     lea     rdi, [rel data_2074]  {"Welcome!"}
000011b1  e87afeffff         call    puts
000011b6  eb0c               jmp     0x11c4

000011b8  488d3dbe0e0000     lea     rdi, [rel data_207d]  {"Denied!!"}
000011bf  e86cfeffff         call    puts

000011c4  b800000000         mov     eax, 0x0
000011c9  c9                 leave    {__saved_rbp}
000011ca  c3                 retn     {__return_addr}

000011cb           0f 1f 44 00 00     ..D..

000011d0  void __libc_csu_init()

000011d0  4157               push    r15 {__saved_r15}
000011d2  4c8d3d0f2c0000     lea     r15, [rel __init_array_start]
000011d9  4156               push    r14 {__saved_r14}
000011db  4989d6             mov     r14, rdx
000011de  4155               push    r13 {__saved_r13}
000011e0  4989f5             mov     r13, rsi
000011e3  4154               push    r12 {__saved_r12}
000011e5  4189fc             mov     r12d, edi
000011e8  55                 push    rbp {__saved_rbp}
000011e9  488d2d002c0000     lea     rbp, [rel __init_array_end]
000011f0  53                 push    rbx {__saved_rbx}
000011f1  4c29fd             sub     rbp, r15
000011f4  4883ec08           sub     rsp, 0x8
000011f8  e803feffff         call    _init
000011fd  48c1fd03           sar     rbp, 0x3
00001201  741b               je      0x121e  {0x0}

00001203  31db               xor     ebx, ebx  {0x0}
00001205  0f1f00             nop     dword [rax], eax

00001208  4c89f2             mov     rdx, r14
0000120b  4c89ee             mov     rsi, r13
0000120e  4489e7             mov     edi, r12d
00001211  41ff14df           call    qword [r15+rbx*8]
00001215  4883c301           add     rbx, 0x1
00001219  4839dd             cmp     rbp, rbx
0000121c  75ea               jne     0x1208

0000121e  4883c408           add     rsp, 0x8
00001222  5b                 pop     rbx {__saved_rbx}
00001223  5d                 pop     rbp {__saved_rbp}
00001224  415c               pop     r12 {__saved_r12}
00001226  415d               pop     r13 {__saved_r13}
00001228  415e               pop     r14 {__saved_r14}
0000122a  415f               pop     r15 {__saved_r15}
0000122c  c3                 retn     {__return_addr}

0000122d                 0f 1f 00       ...

00001230  void __libc_csu_fini()

00001230  c3                 retn     {__return_addr}

.text (PROGBITS) section ended  {0x1070-0x1231}

00001231     00 00 00               ...

.fini (PROGBITS) section started  {0x1234-0x123d}

00001234  int64_t _fini()

00001234  4883ec08           sub     rsp, 0x8
00001238  4883c408           add     rsp, 0x8
0000123c  c3                 retn     {__return_addr}

.fini (PROGBITS) section ended  {0x1234-0x123d}

.rodata (PROGBITS) section started  {0x2000-0x2086}
00002000  uint32_t _IO_stdin_used = 0x20001

00002004              00 00 00 00      ....

00002008  char const data_2008[0x5e] = "Enter a number greater than 1,000. Don\'t t"
00002008      "ry negative numbers, they obviously won\'t work!:_> ", 0

00002066  data_2066:
00002066                    25 64        %d
00002068  00                       .

00002069  char const data_2069[0xb] = "flag = %d\n", 0
00002074  char const data_2074[0x9] = "Welcome!", 0
0000207d  char const data_207d[0x9] = "Denied!!", 0
.rodata (PROGBITS) section ended  {0x2000-0x2086}

00002086                    00 00        ..

.eh_frame_hdr (PROGBITS) section started  {0x2088-0x20c4}
00002088  __GNU_EH_FRAME_HDR:
00002088  01 1b 03 3b 3c 00 00 00  ...;<...
00002090  06 00 00 00 98 ef ff ff  ........
00002098  88 00 00 00 d8 ef ff ff  ........
000020a0  b0 00 00 00 e8 ef ff ff  ........
000020a8  58 00 00 00 cd f0 ff ff  X.......
000020b0  c8 00 00 00 48 f1 ff ff  ....H...
000020b8  e8 00 00 00 a8 f1 ff ff  ........
000020c0  30 01 00 00              0...
.eh_frame_hdr (PROGBITS) section ended  {0x2088-0x20c4}

000020c4              00 00 00 00      ....

.eh_frame (PROGBITS) section started  {0x20c8-0x21d0}
000020c8  14 00 00 00 00 00 00 00  ........
000020d0  01 7a 52 00 01 78 10 01  .zR..x..
000020d8  1b 0c 07 08 90 01 07 10  ........
000020e0  14 00 00 00 1c 00 00 00  ........
000020e8  88 ef ff ff 2b 00 00 00  ....+...
000020f0  00 00 00 00 00 00 00 00  ........
000020f8  14 00 00 00 00 00 00 00  ........
00002100  01 7a 52 00 01 78 10 01  .zR..x..
00002108  1b 0c 07 08 90 01 00 00  ........
00002110  24 00 00 00 1c 00 00 00  $.......
00002118  08 ef ff ff 40 00 00 00  ....@...
00002120  00 0e 10 46 0e 18 4a 0f  ...F..J.
00002128  0b 77 08 80 00 3f 1a 3b  .w...?.;
00002130  2a 33 24 22 00 00 00 00  *3$"....
00002138  14 00 00 00 44 00 00 00  ....D...
00002140  20 ef ff ff 08 00 00 00   .......
00002148  00 00 00 00 00 00 00 00  ........
00002150  1c 00 00 00 5c 00 00 00  ....\...
00002158  fd ef ff ff 76 00 00 00  ....v...
00002160  00 41 0e 10 86 02 43 0d  .A....C.
00002168  06 02 71 0c 07 08 00 00  ..q.....
00002170  44 00 00 00 7c 00 00 00  D...|...
00002178  58 f0 ff ff 5d 00 00 00  X...]...
00002180  00 42 0e 10 8f 02 49 0e  .B....I.
00002188  18 8e 03 45 0e 20 8d 04  ...E. ..
00002190  45 0e 28 8c 05 44 0e 30  E.(..D.0
00002198  86 06 48 0e 38 83 07 47  ..H.8..G
000021a0  0e 40 6a 0e 38 41 0e 30  .@j.8A.0
000021a8  41 0e 28 42 0e 20 42 0e  A.(B. B.
000021b0  18 42 0e 10 42 0e 08 00  .B..B...
000021b8  10 00 00 00 c4 00 00 00  ........
000021c0  70 f0 ff ff 01 00 00 00  p.......
000021c8  00 00 00 00              ....
000021cc  __FRAME_END__:
000021cc              00 00 00 00      ....
.eh_frame (PROGBITS) section ended  {0x20c8-0x21d0}

.init_array section started  {0x3de8-0x3df0}
00003de8  void* __init_array_start = frame_dummy
.init_array section ended  {0x3de8-0x3df0}

.fini_array section started  {0x3df0-0x3df8}
00003df0  void* __init_array_end = __do_global_dtors_aux
.fini_array section ended  {0x3df0-0x3df8}

.dynamic (DYNAMIC) section started  {0x3df8-0x3fd8}
00003df8  struct Elf64_Dyn __elf_dynamic_table[0x1a] = 
00003df8  {
00003df8      [0x00] = 
00003df8      {
00003df8          enum e_dyn_tag d_tag = DT_NEEDED
00003e00          uint64_t d_val = 0x3d
00003e08      }
00003e08      [0x01] = 
00003e08      {
00003e08          enum e_dyn_tag d_tag = DT_INIT
00003e10          uint64_t d_val = 0x1000
00003e18      }
00003e18      [0x02] = 
00003e18      {
00003e18          enum e_dyn_tag d_tag = DT_FINI
00003e20          uint64_t d_val = 0x1234
00003e28      }
00003e28      [0x03] = 
00003e28      {
00003e28          enum e_dyn_tag d_tag = DT_INIT_ARRAY
00003e30          uint64_t d_val = 0x3de8
00003e38      }
00003e38      [0x04] = 
00003e38      {
00003e38          enum e_dyn_tag d_tag = DT_INIT_ARRAYSZ
00003e40          uint64_t d_val = 0x8
00003e48      }
00003e48      [0x05] = 
00003e48      {
00003e48          enum e_dyn_tag d_tag = DT_FINI_ARRAY
00003e50          uint64_t d_val = 0x3df0
00003e58      }
00003e58      [0x06] = 
00003e58      {
00003e58          enum e_dyn_tag d_tag = DT_FINI_ARRAYSZ
00003e60          uint64_t d_val = 0x8
00003e68      }
00003e68      [0x07] = 
00003e68      {
00003e68          enum e_dyn_tag d_tag = DT_GNU_HASH
00003e70          uint64_t d_val = 0x308
00003e78      }
00003e78      [0x08] = 
00003e78      {
00003e78          enum e_dyn_tag d_tag = DT_STRTAB
00003e80          uint64_t d_val = 0x408
00003e88      }
00003e88      [0x09] = 
00003e88      {
00003e88          enum e_dyn_tag d_tag = DT_SYMTAB
00003e90          uint64_t d_val = 0x330
00003e98      }
00003e98      [0x0a] = 
00003e98      {
00003e98          enum e_dyn_tag d_tag = DT_STRSZ
00003ea0          uint64_t d_val = 0xa2
00003ea8      }
00003ea8      [0x0b] = 
00003ea8      {
00003ea8          enum e_dyn_tag d_tag = DT_SYMENT
00003eb0          uint64_t d_val = 0x18
00003eb8      }
00003eb8      [0x0c] = 
00003eb8      {
00003eb8          enum e_dyn_tag d_tag = DT_DEBUG
00003ec0          uint64_t d_val = 0x0
00003ec8      }
00003ec8      [0x0d] = 
00003ec8      {
00003ec8          enum e_dyn_tag d_tag = DT_PLTGOT
00003ed0          uint64_t d_val = 0x4000
00003ed8      }
00003ed8      [0x0e] = 
00003ed8      {
00003ed8          enum e_dyn_tag d_tag = DT_PLTRELSZ
00003ee0          uint64_t d_val = 0x48
00003ee8      }
00003ee8      [0x0f] = 
00003ee8      {
00003ee8          enum e_dyn_tag d_tag = DT_PLTREL
00003ef0          uint64_t d_val = 0x7
00003ef8      }
00003ef8      [0x10] = 
00003ef8      {
00003ef8          enum e_dyn_tag d_tag = DT_JMPREL
00003f00          uint64_t d_val = 0x5b0
00003f08      }
00003f08      [0x11] = 
00003f08      {
00003f08          enum e_dyn_tag d_tag = DT_RELA
00003f10          uint64_t d_val = 0x4f0
00003f18      }
00003f18      [0x12] = 
00003f18      {
00003f18          enum e_dyn_tag d_tag = DT_RELASZ
00003f20          uint64_t d_val = 0xc0
00003f28      }
00003f28      [0x13] = 
00003f28      {
00003f28          enum e_dyn_tag d_tag = DT_RELAENT
00003f30          uint64_t d_val = 0x18
00003f38      }
00003f38      [0x14] = 
00003f38      {
00003f38          enum e_dyn_tag d_tag = DT_FLAGS_1
00003f40          uint64_t d_val = 0x8000000
00003f48      }
00003f48      [0x15] = 
00003f48      {
00003f48          enum e_dyn_tag d_tag = DT_VERNEED
00003f50          uint64_t d_val = 0x4c0
00003f58      }
00003f58      [0x16] = 
00003f58      {
00003f58          enum e_dyn_tag d_tag = DT_VERNEEDNUM
00003f60          uint64_t d_val = 0x1
00003f68      }
00003f68      [0x17] = 
00003f68      {
00003f68          enum e_dyn_tag d_tag = DT_VERSYM
00003f70          uint64_t d_val = 0x4aa
00003f78      }
00003f78      [0x18] = 
00003f78      {
00003f78          enum e_dyn_tag d_tag = DT_RELACOUNT
00003f80          uint64_t d_val = 0x3
00003f88      }
00003f88      [0x19] = 
00003f88      {
00003f88          enum e_dyn_tag d_tag = DT_NULL
00003f90          uint64_t d_val = 0x0
00003f98      }
00003f98  }

00003f98  00 00 00 00 00 00 00 00  ........
00003fa0  00 00 00 00 00 00 00 00  ........
00003fa8  00 00 00 00 00 00 00 00  ........
00003fb0  00 00 00 00 00 00 00 00  ........
00003fb8  00 00 00 00 00 00 00 00  ........
00003fc0  00 00 00 00 00 00 00 00  ........
00003fc8  00 00 00 00 00 00 00 00  ........
00003fd0  00 00 00 00 00 00 00 00  ........
.dynamic (DYNAMIC) section ended  {0x3df8-0x3fd8}

.got (PROGBITS) section started  {0x3fd8-0x4000}
00003fd8  int64_t (* const _ITM_deregisterTMCloneTable)() = _ITM_deregisterTMCloneTable
00003fe0  void (* const __libc_start_main)(int32_t (* main)(int32_t argc, char** argv, char** envp), int32_t argc, char** ubp_av, void (* init)(), void (* fini)(), void (* rtld_fini)(), void* stack_end) __noreturn = __libc_start_main
00003fe8  int64_t (* const __gmon_start__)() = __gmon_start__
00003ff0  int64_t (* const _ITM_registerTMCloneTable)() = _ITM_registerTMCloneTable
00003ff8  void (* const __cxa_finalize)(void* d) = __cxa_finalize
.got (PROGBITS) section ended  {0x3fd8-0x4000}

.got.plt (PROGBITS) section started  {0x4000-0x4030}
00004000  _GLOBAL_OFFSET_TABLE_:
00004000  f8 3d 00 00 00 00 00 00  .=......

00004008  int64_t data_4008 = 0x0
00004010  int64_t data_4010 = 0x0
00004018  int32_t (* const puts)(char const* str) = puts
00004020  int32_t (* const printf)(char const* format, ...) = printf
00004028  int32_t (* const __isoc99_scanf)(char const* format, ...) = __isoc99_scanf
.got.plt (PROGBITS) section ended  {0x4000-0x4030}

.data (PROGBITS) section started  {0x4030-0x4040}
00004030  __data_start:
00004030  00 00 00 00 00 00 00 00  ........

00004038  void* __dso_handle = __dso_handle
.data (PROGBITS) section ended  {0x4030-0x4040}

.bss (NOBITS) section started  {0x4040-0x4048}
00004040  char __TMC_END__ = 0x0

00004041     00 00 00 00 00 00 00   .......
.bss (NOBITS) section ended  {0x4040-0x4048}

.extern section started  {0x4050-0x4090}
00004050  extern _ITM_deregisterTMCloneTable
00004058  extern _ITM_registerTMCloneTable
00004060  extern void  __cxa_finalize(void* d)
00004068  extern __gmon_start__
00004070  extern int32_t  __isoc99_scanf(char const* format, ...)
00004078  extern void  __libc_start_main(int32_t (* main)(int32_t argc, char** argv, char** envp), int32_t argc, char** ubp_av, void (* init)(), void (* fini)(), void (* rtld_fini)(), void* stack_end) __noreturn
00004080  extern int32_t  printf(char const* format, ...)
00004088  extern int32_t  puts(char const* str)
.extern section ended  {0x4050-0x4090}

