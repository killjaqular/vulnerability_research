/*
Type: ELF
Platform: linux-x86_64
Architecture: x86_64

Libraries: 
  libc.so.6

Segments:
r--  0x00000000-0x00000718 
r-x  0x00001000-0x00001355 
r--  0x00002000-0x000021c0 
rw-  0x00003d90-0x00004018 
---  0x00004020-0x00004078 

Sections:
0x00000318-0x00000334  .interp (PROGBITS)  {Read-only data}
0x00000338-0x00000358  .note.gnu.property (NOTE)  {Read-only data}
0x00000358-0x0000037c  .note.gnu.build-id (NOTE)  {Read-only data}
0x0000037c-0x0000039c  .note.ABI-tag (NOTE)  {Read-only data}
0x000003a0-0x000003c4  .gnu.hash  {Read-only data}
0x000003c8-0x000004e8  .dynsym (DYNSYM)  {Read-only data}
0x000004e8-0x0000058a  .dynstr (STRTAB)  {Read-only data}
0x0000058a-0x000005a2  .gnu.version  {Read-only data}
0x000005a8-0x000005c8  .gnu.version_r  {Read-only data}
0x000005c8-0x00000688  .rela.dyn (RELA)  {Read-only data}
0x00000688-0x00000718  .rela.plt (RELA)  {Read-only data}
0x00001000-0x0000101b  .init (PROGBITS)  {Code}
0x00001020-0x00001090  .plt (PROGBITS)  {Code}
0x00001090-0x000010a0  .plt.got (PROGBITS)  {Code}
0x000010a0-0x00001100  .plt.sec (PROGBITS)  {Code}
0x00001100-0x00001345  .text (PROGBITS)  {Code}
0x00001348-0x00001355  .fini (PROGBITS)  {Code}
0x00002000-0x00002047  .rodata (PROGBITS)  {Read-only data}
0x00002048-0x00002094  .eh_frame_hdr (PROGBITS)  {Read-only data}
0x00002098-0x000021c0  .eh_frame (PROGBITS)  {Read-only data}
0x00003d90-0x00003d98  .init_array  {Writable data}
0x00003d98-0x00003da0  .fini_array  {Writable data}
0x00003da0-0x00003f90  .dynamic (DYNAMIC)  {Read-only data}
0x00003f90-0x00004000  .got (PROGBITS)  {Read-only data}
0x00004000-0x00004010  .data (PROGBITS)  {Writable data}
0x00004010-0x00004018  .bss (NOBITS)  {Writable data}
0x00004020-0x00004078  .extern  {External}
*/
00000000  struct Elf64_Header __elf_header = 
00000000  {
00000000      struct Elf64_Ident ident = 
00000000      {
00000000          char signature[0x4] = "\x7fELF"
00000004          uint8_t file_class = 0x2
00000005          uint8_t encoding = 0x1
00000006          uint8_t version = 0x1
00000007          uint8_t os = 0x0
00000008          uint8_t abi_version = 0x0
00000009          char pad[0x7] = "\x00\x00\x00\x00\x00\x00", 0
00000010      }
00000010      enum e_type type = ET_DYN
00000012      enum e_machine machine = EM_X86_64
00000014      uint32_t version = 0x1
00000018      void (* entry)() = _start
00000020      uint64_t program_header_offset = 0x40
00000028      uint64_t section_header_offset = 0x3a78
00000030      uint32_t flags = 0x0
00000034      uint16_t header_size = 0x40
00000036      uint16_t program_header_size = 0x38
00000038      uint16_t program_header_count = 0xd
0000003a      uint16_t section_header_size = 0x40
0000003c      uint16_t section_header_count = 0x1f
0000003e      uint16_t string_table = 0x1e
00000040  }
00000040  struct Elf64_ProgramHeader __elf_program_headers[0xd] = 
00000040  {
00000040      [0x0] = 
00000040      {
00000040          enum p_type type = PT_PHDR
00000044          enum p_flags flags = PF_R
00000048          uint64_t offset = 0x40
00000050          uint64_t virtual_address = 0x40
00000058          uint64_t physical_address = 0x40
00000060          uint64_t file_size = 0x2d8
00000068          uint64_t memory_size = 0x2d8
00000070          uint64_t align = 0x8
00000078      }
00000078      [0x1] = 
00000078      {
00000078          enum p_type type = PT_INTERP
0000007c          enum p_flags flags = PF_R
00000080          uint64_t offset = 0x318
00000088          uint64_t virtual_address = 0x318
00000090          uint64_t physical_address = 0x318
00000098          uint64_t file_size = 0x1c
000000a0          uint64_t memory_size = 0x1c
000000a8          uint64_t align = 0x1
000000b0      }
000000b0      [0x2] = 
000000b0      {
000000b0          enum p_type type = PT_LOAD
000000b4          enum p_flags flags = PF_R
000000b8          uint64_t offset = 0x0
000000c0          uint64_t virtual_address = 0x0
000000c8          uint64_t physical_address = 0x0
000000d0          uint64_t file_size = 0x718
000000d8          uint64_t memory_size = 0x718
000000e0          uint64_t align = 0x1000
000000e8      }
000000e8      [0x3] = 
000000e8      {
000000e8          enum p_type type = PT_LOAD
000000ec          enum p_flags flags = PF_X | PF_R
000000f0          uint64_t offset = 0x1000
000000f8          uint64_t virtual_address = 0x1000
00000100          uint64_t physical_address = 0x1000
00000108          uint64_t file_size = 0x355
00000110          uint64_t memory_size = 0x355
00000118          uint64_t align = 0x1000
00000120      }
00000120      [0x4] = 
00000120      {
00000120          enum p_type type = PT_LOAD
00000124          enum p_flags flags = PF_R
00000128          uint64_t offset = 0x2000
00000130          uint64_t virtual_address = 0x2000
00000138          uint64_t physical_address = 0x2000
00000140          uint64_t file_size = 0x1c0
00000148          uint64_t memory_size = 0x1c0
00000150          uint64_t align = 0x1000
00000158      }
00000158      [0x5] = 
00000158      {
00000158          enum p_type type = PT_LOAD
0000015c          enum p_flags flags = PF_W | PF_R
00000160          uint64_t offset = 0x2d90
00000168          uint64_t virtual_address = 0x3d90
00000170          uint64_t physical_address = 0x3d90
00000178          uint64_t file_size = 0x280
00000180          uint64_t memory_size = 0x288
00000188          uint64_t align = 0x1000
00000190      }
00000190      [0x6] = 
00000190      {
00000190          enum p_type type = PT_DYNAMIC
00000194          enum p_flags flags = PF_W | PF_R
00000198          uint64_t offset = 0x2da0
000001a0          uint64_t virtual_address = 0x3da0
000001a8          uint64_t physical_address = 0x3da0
000001b0          uint64_t file_size = 0x1f0
000001b8          uint64_t memory_size = 0x1f0
000001c0          uint64_t align = 0x8
000001c8      }
000001c8      [0x7] = 
000001c8      {
000001c8          enum p_type type = PT_NOTE
000001cc          enum p_flags flags = PF_R
000001d0          uint64_t offset = 0x338
000001d8          uint64_t virtual_address = 0x338
000001e0          uint64_t physical_address = 0x338
000001e8          uint64_t file_size = 0x20
000001f0          uint64_t memory_size = 0x20
000001f8          uint64_t align = 0x8
00000200      }
00000200      [0x8] = 
00000200      {
00000200          enum p_type type = PT_NOTE
00000204          enum p_flags flags = PF_R
00000208          uint64_t offset = 0x358
00000210          uint64_t virtual_address = 0x358
00000218          uint64_t physical_address = 0x358
00000220          uint64_t file_size = 0x44
00000228          uint64_t memory_size = 0x44
00000230          uint64_t align = 0x4
00000238      }
00000238      [0x9] = 
00000238      {
00000238          enum p_type type = 0x6474e553
0000023c          enum p_flags flags = PF_R
00000240          uint64_t offset = 0x338
00000248          uint64_t virtual_address = 0x338
00000250          uint64_t physical_address = 0x338
00000258          uint64_t file_size = 0x20
00000260          uint64_t memory_size = 0x20
00000268          uint64_t align = 0x8
00000270      }
00000270      [0xa] = 
00000270      {
00000270          enum p_type type = PT_GNU_EH_FRAME
00000274          enum p_flags flags = PF_R
00000278          uint64_t offset = 0x2048
00000280          uint64_t virtual_address = 0x2048
00000288          uint64_t physical_address = 0x2048
00000290          uint64_t file_size = 0x4c
00000298          uint64_t memory_size = 0x4c
000002a0          uint64_t align = 0x4
000002a8      }
000002a8      [0xb] = 
000002a8      {
000002a8          enum p_type type = PT_GNU_STACK
000002ac          enum p_flags flags = PF_W | PF_R
000002b0          uint64_t offset = 0x0
000002b8          uint64_t virtual_address = 0x0
000002c0          uint64_t physical_address = 0x0
000002c8          uint64_t file_size = 0x0
000002d0          uint64_t memory_size = 0x0
000002d8          uint64_t align = 0x10
000002e0      }
000002e0      [0xc] = 
000002e0      {
000002e0          enum p_type type = PT_GNU_RELRO
000002e4          enum p_flags flags = PF_R
000002e8          uint64_t offset = 0x2d90
000002f0          uint64_t virtual_address = 0x3d90
000002f8          uint64_t physical_address = 0x3d90
00000300          uint64_t file_size = 0x270
00000308          uint64_t memory_size = 0x270
00000310          uint64_t align = 0x1
00000318      }
00000318  }

.interp (PROGBITS) section started  {0x318-0x334}
00000318  char __elf_interp[0x1c] = "/lib64/ld-linux-x86-64.so.2", 0
.interp (PROGBITS) section ended  {0x318-0x334}

00000334              00 00 00 00      ....

.note.gnu.property (NOTE) section started  {0x338-0x358}
00000338  04 00 00 00 10 00 00 00  ........
00000340  05 00 00 00 47 4e 55 00  ....GNU.
00000348  02 00 00 c0 04 00 00 00  ........
00000350  03 00 00 00 00 00 00 00  ........
.note.gnu.property (NOTE) section ended  {0x338-0x358}

.note.gnu.build-id (NOTE) section started  {0x358-0x37c}
00000358  04 00 00 00 14 00 00 00  ........
00000360  03 00 00 00 47 4e 55 00  ....GNU.
00000368  6f 71 4a 73 72 f2 a0 82  oqJsr...
00000370  1c 1f f8 5d 6e 9e 96 ed  ...]n...
00000378  bf 8a a2 da              ....
.note.gnu.build-id (NOTE) section ended  {0x358-0x37c}

.note.ABI-tag (NOTE) section started  {0x37c-0x39c}
0000037c              04 00 00 00      ....
00000380  10 00 00 00 01 00 00 00  ........
00000388  47 4e 55 00 00 00 00 00  GNU.....
00000390  03 00 00 00 02 00 00 00  ........
00000398  00 00 00 00              ....
.note.ABI-tag (NOTE) section ended  {0x37c-0x39c}

0000039c              00 00 00 00      ....

.gnu.hash section started  {0x3a0-0x3c4}
000003a0  02 00 00 00 0b 00 00 00  ........
000003a8  01 00 00 00 06 00 00 00  ........
000003b0  00 00 81 00 00 00 00 00  ........
000003b8  0b 00 00 00 00 00 00 00  ........
000003c0  d1 65 ce 6d              .e.m
.gnu.hash section ended  {0x3a0-0x3c4}

000003c4              00 00 00 00      ....

.dynsym (DYNSYM) section started  {0x3c8-0x4e8}
000003c8  struct Elf64_Sym __elf_symbol_table[0xc] = 
000003c8  {
000003c8      [0x0] = 
000003c8      {
000003c8          uint32_t st_name = 0x0
000003cc          uint8_t st_info = 0x0
000003cd          uint8_t st_other = 0x0
000003ce          uint16_t st_shndx = 0x0
000003d0          uint64_t st_value = 0x0
000003d8          uint64_t st_size = 0x0
000003e0      }
000003e0      [0x1] = 
000003e0      {
000003e0          uint32_t st_name = 0x5d
000003e4          uint8_t st_info = 0x20
000003e5          uint8_t st_other = 0x0
000003e6          uint16_t st_shndx = 0x0
000003e8          uint64_t st_value = 0x0
000003f0          uint64_t st_size = 0x0
000003f8      }
000003f8      [0x2] = 
000003f8      {
000003f8          uint32_t st_name = 0x17
000003fc          uint8_t st_info = 0x12
000003fd          uint8_t st_other = 0x0
000003fe          uint16_t st_shndx = 0x0
00000400          uint64_t st_value = 0x0
00000408          uint64_t st_size = 0x0
00000410      }
00000410      [0x3] = 
00000410      {
00000410          uint32_t st_name = 0x2a
00000414          uint8_t st_info = 0x12
00000415          uint8_t st_other = 0x0
00000416          uint16_t st_shndx = 0x0
00000418          uint64_t st_value = 0x0
00000420          uint64_t st_size = 0x0
00000428      }
00000428      [0x4] = 
00000428      {
00000428          uint32_t st_name = 0x23
0000042c          uint8_t st_info = 0x12
0000042d          uint8_t st_other = 0x0
0000042e          uint16_t st_shndx = 0x0
00000430          uint64_t st_value = 0x0
00000438          uint64_t st_size = 0x0
00000440      }
00000440      [0x5] = 
00000440      {
00000440          uint32_t st_name = 0x1c
00000444          uint8_t st_info = 0x12
00000445          uint8_t st_other = 0x0
00000446          uint16_t st_shndx = 0x0
00000448          uint64_t st_value = 0x0
00000450          uint64_t st_size = 0x0
00000458      }
00000458      [0x6] = 
00000458      {
00000458          uint32_t st_name = 0x3f
0000045c          uint8_t st_info = 0x12
0000045d          uint8_t st_other = 0x0
0000045e          uint16_t st_shndx = 0x0
00000460          uint64_t st_value = 0x0
00000468          uint64_t st_size = 0x0
00000470      }
00000470      [0x7] = 
00000470      {
00000470          uint32_t st_name = 0x11
00000474          uint8_t st_info = 0x12
00000475          uint8_t st_other = 0x0
00000476          uint16_t st_shndx = 0x0
00000478          uint64_t st_value = 0x0
00000480          uint64_t st_size = 0x0
00000488      }
00000488      [0x8] = 
00000488      {
00000488          uint32_t st_name = 0x79
0000048c          uint8_t st_info = 0x20
0000048d          uint8_t st_other = 0x0
0000048e          uint16_t st_shndx = 0x0
00000490          uint64_t st_value = 0x0
00000498          uint64_t st_size = 0x0
000004a0      }
000004a0      [0x9] = 
000004a0      {
000004a0          uint32_t st_name = 0xb
000004a4          uint8_t st_info = 0x12
000004a5          uint8_t st_other = 0x0
000004a6          uint16_t st_shndx = 0x0
000004a8          uint64_t st_value = 0x0
000004b0          uint64_t st_size = 0x0
000004b8      }
000004b8      [0xa] = 
000004b8      {
000004b8          uint32_t st_name = 0x88
000004bc          uint8_t st_info = 0x20
000004bd          uint8_t st_other = 0x0
000004be          uint16_t st_shndx = 0x0
000004c0          uint64_t st_value = 0x0
000004c8          uint64_t st_size = 0x0
000004d0      }
000004d0      [0xb] = 
000004d0      {
000004d0          uint32_t st_name = 0x30
000004d4          uint8_t st_info = 0x22
000004d5          uint8_t st_other = 0x0
000004d6          uint16_t st_shndx = 0x0
000004d8          uint64_t st_value = 0x0
000004e0          uint64_t st_size = 0x0
000004e8      }
000004e8  }
.dynsym (DYNSYM) section ended  {0x3c8-0x4e8}

.dynstr (STRTAB) section started  {0x4e8-0x58a}
000004e8  00                       .

000004e9  char data_4e9[0xa] = "libc.so.6", 0
000004f3  char data_4f3[0x6] = "fopen", 0
000004f9  char data_4f9[0x6] = "ftell", 0
000004ff  char data_4ff[0x5] = "puts", 0
00000504  char data_504[0x7] = "printf", 0
0000050b  char data_50b[0x7] = "fclose", 0
00000512  char data_512[0x6] = "fread", 0
00000518  char data_518[0xf] = "__cxa_finalize", 0
00000527  char data_527[0x12] = "__libc_start_main", 0
00000539  char data_539[0xc] = "GLIBC_2.2.5", 0
00000545  char data_545[0x1c] = "_ITM_deregisterTMCloneTable", 0
00000561  char data_561[0xf] = "__gmon_start__", 0
00000570  char data_570[0x1a] = "_ITM_registerTMCloneTable", 0
.dynstr (STRTAB) section ended  {0x4e8-0x58a}

.gnu.version section started  {0x58a-0x5a2}
0000058a        00 00 00 00 02 00    ......
00000590  02 00 02 00 02 00 02 00  ........
00000598  02 00 00 00 02 00 00 00  ........
000005a0  02 00                    ..
.gnu.version section ended  {0x58a-0x5a2}

000005a2        00 00 00 00 00 00    ......

.gnu.version_r section started  {0x5a8-0x5c8}
000005a8  01 00 01 00 01 00 00 00  ........
000005b0  10 00 00 00 00 00 00 00  ........
000005b8  75 1a 69 09 00 00 02 00  u.i.....
000005c0  51 00 00 00 00 00 00 00  Q.......
.gnu.version_r section ended  {0x5a8-0x5c8}

.rela.dyn (RELA) section started  {0x5c8-0x688}
000005c8  90 3d 00 00 00 00 00 00  .=......
000005d0  08 00 00 00 00 00 00 00  ........
000005d8  e0 11 00 00 00 00 00 00  ........
000005e0  98 3d 00 00 00 00 00 00  .=......
000005e8  08 00 00 00 00 00 00 00  ........
000005f0  a0 11 00 00 00 00 00 00  ........
000005f8  08 40 00 00 00 00 00 00  .@......
00000600  08 00 00 00 00 00 00 00  ........
00000608  08 40 00 00 00 00 00 00  .@......
00000610  d8 3f 00 00 00 00 00 00  .?......
00000618  06 00 00 00 01 00 00 00  ........
00000620  00 00 00 00 00 00 00 00  ........
00000628  e0 3f 00 00 00 00 00 00  .?......
00000630  06 00 00 00 06 00 00 00  ........
00000638  00 00 00 00 00 00 00 00  ........
00000640  e8 3f 00 00 00 00 00 00  .?......
00000648  06 00 00 00 08 00 00 00  ........
00000650  00 00 00 00 00 00 00 00  ........
00000658  f0 3f 00 00 00 00 00 00  .?......
00000660  06 00 00 00 0a 00 00 00  ........
00000668  00 00 00 00 00 00 00 00  ........
00000670  f8 3f 00 00 00 00 00 00  .?......
00000678  06 00 00 00 0b 00 00 00  ........
00000680  00 00 00 00 00 00 00 00  ........
.rela.dyn (RELA) section ended  {0x5c8-0x688}

.rela.plt (RELA) section started  {0x688-0x718}
00000688  a8 3f 00 00 00 00 00 00  .?......
00000690  07 00 00 00 02 00 00 00  ........
00000698  00 00 00 00 00 00 00 00  ........
000006a0  b0 3f 00 00 00 00 00 00  .?......
000006a8  07 00 00 00 03 00 00 00  ........
000006b0  00 00 00 00 00 00 00 00  ........
000006b8  b8 3f 00 00 00 00 00 00  .?......
000006c0  07 00 00 00 04 00 00 00  ........
000006c8  00 00 00 00 00 00 00 00  ........
000006d0  c0 3f 00 00 00 00 00 00  .?......
000006d8  07 00 00 00 05 00 00 00  ........
000006e0  00 00 00 00 00 00 00 00  ........
000006e8  c8 3f 00 00 00 00 00 00  .?......
000006f0  07 00 00 00 07 00 00 00  ........
000006f8  00 00 00 00 00 00 00 00  ........
00000700  d0 3f 00 00 00 00 00 00  .?......
00000708  07 00 00 00 09 00 00 00  ........
00000710  00 00 00 00 00 00 00 00  ........
.rela.plt (RELA) section ended  {0x688-0x718}

.init (PROGBITS) section started  {0x1000-0x101b}

00001000  void _init()

00001000  f30f1efa           endbr64 
00001004  4883ec08           sub     rsp, 0x8
00001008  488b05d92f0000     mov     rax, qword [rel __gmon_start__]
0000100f  4885c0             test    rax, rax
00001012  7402               je      0x1016

00001014  ffd0               call    rax

00001016  4883c408           add     rsp, 0x8
0000101a  c3                 retn     {__return_addr}

.init (PROGBITS) section ended  {0x1000-0x101b}

0000101b           00 00 00 00 00     .....

.plt (PROGBITS) section started  {0x1020-0x1090}

{ Continuation of function sub_1030 }

00001020  ff35722f0000       push    qword [rel data_3f98] {var_10}  {0x0}
00001026  f2ff25732f0000     bnd jmp qword [rel data_3fa0]  {__elf_header}

0000102d                 0f 1f 00       ...

00001030  int64_t sub_1030()

00001030  f30f1efa           endbr64 
00001034  6800000000         push    0x0 {var_8}
00001039  f2e9e1ffffff       bnd jmp 0x1020

0000103f                       90         .
00001040  f3 0f 1e fa 68 01 00 00  ....h...
00001048  00 f2 e9 d1 ff ff ff 90  ........
00001050  f3 0f 1e fa 68 02 00 00  ....h...
00001058  00 f2 e9 c1 ff ff ff 90  ........
00001060  f3 0f 1e fa 68 03 00 00  ....h...
00001068  00 f2 e9 b1 ff ff ff 90  ........
00001070  f3 0f 1e fa 68 04 00 00  ....h...
00001078  00 f2 e9 a1 ff ff ff 90  ........
00001080  f3 0f 1e fa 68 05 00 00  ....h...
00001088  00 f2 e9 91 ff ff ff 90  ........
.plt (PROGBITS) section ended  {0x1020-0x1090}

.plt.got (PROGBITS) section started  {0x1090-0x10a0}

00001090  void __cxa_finalize(void* d)

00001090  f30f1efa           endbr64 
00001094  f2ff255d2f0000     bnd jmp qword [rel __cxa_finalize]

0000109b           0f 1f 44 00 00     ..D..
.plt.got (PROGBITS) section ended  {0x1090-0x10a0}

.plt.sec (PROGBITS) section started  {0x10a0-0x1100}

000010a0  int32_t puts(char const* str)

000010a0  f30f1efa           endbr64 
000010a4  f2ff25fd2e0000     bnd jmp qword [rel puts]

000010ab           0f 1f 44 00 00     ..D..

000010b0  uint64_t fread(void* buf, uint64_t size, uint64_t count, FILE* fp)

000010b0  f30f1efa           endbr64 
000010b4  f2ff25f52e0000     bnd jmp qword [rel fread]

000010bb           0f 1f 44 00 00     ..D..

000010c0  int32_t fclose(FILE* fp)

000010c0  f30f1efa           endbr64 
000010c4  f2ff25ed2e0000     bnd jmp qword [rel fclose]

000010cb           0f 1f 44 00 00     ..D..

000010d0  int32_t printf(char const* format, ...)

000010d0  f30f1efa           endbr64 
000010d4  f2ff25e52e0000     bnd jmp qword [rel printf]

000010db           0f 1f 44 00 00     ..D..

000010e0  int64_t ftell(FILE* fp)

000010e0  f30f1efa           endbr64 
000010e4  f2ff25dd2e0000     bnd jmp qword [rel ftell]

000010eb           0f 1f 44 00 00     ..D..

000010f0  FILE* fopen(char const* filename, char const* mode)

000010f0  f30f1efa           endbr64 
000010f4  f2ff25d52e0000     bnd jmp qword [rel fopen]

000010fb           0f 1f 44 00 00     ..D..
.plt.sec (PROGBITS) section ended  {0x10a0-0x1100}

.text (PROGBITS) section started  {0x1100-0x1345}

00001100  int64_t _start(int64_t arg1, int64_t arg2, void (* arg3)()) __noreturn

00001100  f30f1efa           endbr64 
00001104  31ed               xor     ebp, ebp  {0x0}
00001106  4989d1             mov     r9, rdx
00001109  5e                 pop     rsi {__return_addr}
0000110a  4889e2             mov     rdx, rsp {arg_8}
0000110d  4883e4f0           and     rsp, 0xfffffffffffffff0
00001111  50                 push    rax {var_8}
00001112  54                 push    rsp {var_8} {var_10}
00001113  4c8d0526020000     lea     r8, [rel __libc_csu_fini]
0000111a  488d0daf010000     lea     rcx, [rel __libc_csu_init]
00001121  488d3d71010000     lea     rdi, [rel main]
00001128  ff15b22e0000       call    qword [rel __libc_start_main]
{ Does not return }

0000112e                    f4 90        ..

00001130  void deregister_tm_clones()

00001130  488d3dd92e0000     lea     rdi, [rel __TMC_END__]
00001137  488d05d22e0000     lea     rax, [rel __TMC_END__]
0000113e  4839f8             cmp     rax, rdi
00001141  7415               je      0x1158  {0x1}

00001143  488b058e2e0000     mov     rax, qword [rel _ITM_deregisterTMCloneTable]
0000114a  4885c0             test    rax, rax
0000114d  7409               je      0x1158

0000114f  ffe0               jmp     rax

00001151     0f 1f 80 00 00 00 00   .......

00001158  c3                 retn     {__return_addr}

00001159     0f 1f 80 00 00 00 00   .......

00001160  void register_tm_clones()

00001160  488d3da92e0000     lea     rdi, [rel __TMC_END__]
00001167  488d35a22e0000     lea     rsi, [rel __TMC_END__]
0000116e  4829fe             sub     rsi, rdi
00001171  4889f0             mov     rax, rsi
00001174  48c1ee3f           shr     rsi, 0x3f
00001178  48c1f803           sar     rax, 0x3
0000117c  4801c6             add     rsi, rax
0000117f  48d1fe             sar     rsi, 0x1
00001182  7414               je      0x1198  {0x1}

00001184  488b05652e0000     mov     rax, qword [rel _ITM_registerTMCloneTable]
0000118b  4885c0             test    rax, rax
0000118e  7408               je      0x1198

00001190  ffe0               jmp     rax

00001192        66 0f 1f 44 00 00    f..D..

00001198  c3                 retn     {__return_addr}

00001199     0f 1f 80 00 00 00 00   .......

000011a0  void __do_global_dtors_aux()

000011a0  f30f1efa           endbr64 
000011a4  803d652e000000     cmp     byte [rel __TMC_END__], 0x0
000011ab  752b               jne     0x11d8  {__TMC_END__}

000011ad  55                 push    rbp {__saved_rbp}
000011ae  48833d422e000000   cmp     qword [rel __cxa_finalize], 0x0
000011b6  4889e5             mov     rbp, rsp {__saved_rbp}
000011b9  740c               je      0x11c7

000011bb  488b3d462e0000     mov     rdi, qword [rel __dso_handle]
000011c2  e8c9feffff         call    __cxa_finalize

000011c7  e864ffffff         call    deregister_tm_clones
000011cc  c6053d2e000001     mov     byte [rel __TMC_END__], 0x1
000011d3  5d                 pop     rbp {__saved_rbp}
000011d4  c3                 retn     {__return_addr}

000011d5                 0f 1f 00       ...

000011d8  c3                 retn     {__return_addr}

000011d9     0f 1f 80 00 00 00 00   .......

000011e0  int64_t frame_dummy()

000011e0  f30f1efa           endbr64 
000011e4  e977ffffff         jmp     register_tm_clones


000011e9  int64_t ParseFileHdr(char* arg1)

000011e9  f30f1efa           endbr64 
000011ed  55                 push    rbp {__saved_rbp}
000011ee  4889e5             mov     rbp, rsp {__saved_rbp}
000011f1  4881ec90000000     sub     rsp, 0x90
000011f8  4889bd78ffffff     mov     qword [rbp-0x88 {var_90}], rdi
000011ff  488b8578ffffff     mov     rax, qword [rbp-0x88 {var_90}]
00001206  488d35f70d0000     lea     rsi, [rel data_2004]
0000120d  4889c7             mov     rdi, rax
00001210  e8dbfeffff         call    fopen
00001215  488945f8           mov     qword [rbp-0x8 {var_10}], rax
00001219  48837df800         cmp     qword [rbp-0x8 {var_10}], 0x0
0000121e  746a               je      0x128a

00001220  488b55f8           mov     rdx, qword [rbp-0x8 {var_10}]
00001224  488d4580           lea     rax, [rbp-0x80 {var_88}]
00001228  4889d1             mov     rcx, rdx
0000122b  ba64000000         mov     edx, 0x64
00001230  be01000000         mov     esi, 0x1
00001235  4889c7             mov     rdi, rax {var_88}
00001238  e873feffff         call    fread
0000123d  488b45f8           mov     rax, qword [rbp-0x8 {var_10}]
00001241  4889c7             mov     rdi, rax
00001244  e877feffff         call    fclose
00001249  488b45f8           mov     rax, qword [rbp-0x8 {var_10}]
0000124d  4889c7             mov     rdi, rax
00001250  e88bfeffff         call    ftell
00001255  488945f0           mov     qword [rbp-0x10 {var_18_1}], rax
00001259  488b55f0           mov     rdx, qword [rbp-0x10 {var_18_1}]
0000125d  488b45f0           mov     rax, qword [rbp-0x10 {var_18_1}]
00001261  4889c6             mov     rsi, rax
00001264  488d3d9c0d0000     lea     rdi, [rel data_2007]  {"BytesRead: %d 0x%08x\n"}
0000126b  b800000000         mov     eax, 0x0
00001270  e85bfeffff         call    printf
00001275  48837df000         cmp     qword [rbp-0x10 {var_18_1}], 0x0
0000127a  741a               je      0x1296

0000127c  488d3d9a0d0000     lea     rdi, [rel data_201d]  {"Oops Reading Header!"}
00001283  e818feffff         call    puts
00001288  eb0c               jmp     0x1296

0000128a  488d3da10d0000     lea     rdi, [rel data_2032]  {"Unable to Open File!"}
00001291  e80afeffff         call    puts

00001296  90                 nop     
00001297  c9                 leave    {__saved_rbp}
00001298  c3                 retn     {__return_addr}


00001299  int32_t main(int32_t argc, char** argv, char** envp)

00001299  f30f1efa           endbr64 
0000129d  55                 push    rbp {__saved_rbp}
0000129e  4889e5             mov     rbp, rsp {__saved_rbp}
000012a1  4883ec10           sub     rsp, 0x10
000012a5  897dfc             mov     dword [rbp-0x4 {var_c}], edi
000012a8  488975f0           mov     qword [rbp-0x10 {var_18}], rsi
000012ac  488b45f0           mov     rax, qword [rbp-0x10 {var_18}]
000012b0  4883c008           add     rax, 0x8
000012b4  488b00             mov     rax, qword [rax]
000012b7  4889c7             mov     rdi, rax
000012ba  e82affffff         call    ParseFileHdr
000012bf  b800000000         mov     eax, 0x0
000012c4  c9                 leave    {__saved_rbp}
000012c5  c3                 retn     {__return_addr}

000012c6                    66 2e        f.
000012c8  0f 1f 84 00 00 00 00 00  ........

000012d0  void __libc_csu_init()

000012d0  f30f1efa           endbr64 
000012d4  4157               push    r15 {__saved_r15}
000012d6  4c8d3db32a0000     lea     r15, [rel __init_array_start]
000012dd  4156               push    r14 {__saved_r14}
000012df  4989d6             mov     r14, rdx
000012e2  4155               push    r13 {__saved_r13}
000012e4  4989f5             mov     r13, rsi
000012e7  4154               push    r12 {__saved_r12}
000012e9  4189fc             mov     r12d, edi
000012ec  55                 push    rbp {__saved_rbp}
000012ed  488d2da42a0000     lea     rbp, [rel __init_array_end]
000012f4  53                 push    rbx {__saved_rbx}
000012f5  4c29fd             sub     rbp, r15
000012f8  4883ec08           sub     rsp, 0x8
000012fc  e8fffcffff         call    _init
00001301  48c1fd03           sar     rbp, 0x3
00001305  741f               je      0x1326  {0x0}

00001307  31db               xor     ebx, ebx  {0x0}
00001309  0f1f8000000000     nop     dword [rax], eax

00001310  4c89f2             mov     rdx, r14
00001313  4c89ee             mov     rsi, r13
00001316  4489e7             mov     edi, r12d
00001319  41ff14df           call    qword [r15+rbx*8]
0000131d  4883c301           add     rbx, 0x1
00001321  4839dd             cmp     rbp, rbx
00001324  75ea               jne     0x1310

00001326  4883c408           add     rsp, 0x8
0000132a  5b                 pop     rbx {__saved_rbx}
0000132b  5d                 pop     rbp {__saved_rbp}
0000132c  415c               pop     r12 {__saved_r12}
0000132e  415d               pop     r13 {__saved_r13}
00001330  415e               pop     r14 {__saved_r14}
00001332  415f               pop     r15 {__saved_r15}
00001334  c3                 retn     {__return_addr}

00001335                 66 66 2e       ff.
00001338  0f 1f 84 00 00 00 00 00  ........

00001340  void __libc_csu_fini()

00001340  f30f1efa           endbr64 
00001344  c3                 retn     {__return_addr}

.text (PROGBITS) section ended  {0x1100-0x1345}

00001345                 00 00 00       ...

.fini (PROGBITS) section started  {0x1348-0x1355}

00001348  int64_t _fini()

00001348  f30f1efa           endbr64 
0000134c  4883ec08           sub     rsp, 0x8
00001350  4883c408           add     rsp, 0x8
00001354  c3                 retn     {__return_addr}

.fini (PROGBITS) section ended  {0x1348-0x1355}

.rodata (PROGBITS) section started  {0x2000-0x2047}
00002000  uint32_t _IO_stdin_used = 0x20001

00002004  data_2004:
00002004              72 62 00         rb.

00002007  char const data_2007[0x16] = "BytesRead: %d 0x%08x\n", 0
0000201d  char const data_201d[0x15] = "Oops Reading Header!", 0
00002032  char const data_2032[0x15] = "Unable to Open File!", 0
.rodata (PROGBITS) section ended  {0x2000-0x2047}

00002047                       00         .

.eh_frame_hdr (PROGBITS) section started  {0x2048-0x2094}
00002048  __GNU_EH_FRAME_HDR:
00002048  01 1b 03 3b 4c 00 00 00  ...;L...
00002050  08 00 00 00 d8 ef ff ff  ........
00002058  80 00 00 00 48 f0 ff ff  ....H...
00002060  a8 00 00 00 58 f0 ff ff  ....X...
00002068  c0 00 00 00 b8 f0 ff ff  ........
00002070  68 00 00 00 a1 f1 ff ff  h.......
00002078  d8 00 00 00 51 f2 ff ff  ....Q...
00002080  f8 00 00 00 88 f2 ff ff  ........
00002088  18 01 00 00 f8 f2 ff ff  ........
00002090  60 01 00 00              `...
.eh_frame_hdr (PROGBITS) section ended  {0x2048-0x2094}

00002094              00 00 00 00      ....

.eh_frame (PROGBITS) section started  {0x2098-0x21c0}
00002098  14 00 00 00 00 00 00 00  ........
000020a0  01 7a 52 00 01 78 10 01  .zR..x..
000020a8  1b 0c 07 08 90 01 00 00  ........
000020b0  14 00 00 00 1c 00 00 00  ........
000020b8  48 f0 ff ff 2f 00 00 00  H.../...
000020c0  00 44 07 10 00 00 00 00  .D......
000020c8  24 00 00 00 34 00 00 00  $...4...
000020d0  50 ef ff ff 70 00 00 00  P...p...
000020d8  00 0e 10 46 0e 18 4a 0f  ...F..J.
000020e0  0b 77 08 80 00 3f 1a 3a  .w...?.:
000020e8  2a 33 24 22 00 00 00 00  *3$"....
000020f0  14 00 00 00 5c 00 00 00  ....\...
000020f8  98 ef ff ff 10 00 00 00  ........
00002100  00 00 00 00 00 00 00 00  ........
00002108  14 00 00 00 74 00 00 00  ....t...
00002110  90 ef ff ff 60 00 00 00  ....`...
00002118  00 00 00 00 00 00 00 00  ........
00002120  1c 00 00 00 8c 00 00 00  ........
00002128  c1 f0 ff ff b0 00 00 00  ........
00002130  00 45 0e 10 86 02 43 0d  .E....C.
00002138  06 02 a7 0c 07 08 00 00  ........
00002140  1c 00 00 00 ac 00 00 00  ........
00002148  51 f1 ff ff 2d 00 00 00  Q...-...
00002150  00 45 0e 10 86 02 43 0d  .E....C.
00002158  06 64 0c 07 08 00 00 00  .d......
00002160  44 00 00 00 cc 00 00 00  D.......
00002168  68 f1 ff ff 65 00 00 00  h...e...
00002170  00 46 0e 10 8f 02 49 0e  .F....I.
00002178  18 8e 03 45 0e 20 8d 04  ...E. ..
00002180  45 0e 28 8c 05 44 0e 30  E.(..D.0
00002188  86 06 48 0e 38 83 07 47  ..H.8..G
00002190  0e 40 6e 0e 38 41 0e 30  .@n.8A.0
00002198  41 0e 28 42 0e 20 42 0e  A.(B. B.
000021a0  18 42 0e 10 42 0e 08 00  .B..B...
000021a8  10 00 00 00 14 01 00 00  ........
000021b0  90 f1 ff ff 05 00 00 00  ........
000021b8  00 00 00 00              ....
000021bc  __FRAME_END__:
000021bc              00 00 00 00      ....
.eh_frame (PROGBITS) section ended  {0x2098-0x21c0}

.init_array section started  {0x3d90-0x3d98}
00003d90  void* __init_array_start = frame_dummy
.init_array section ended  {0x3d90-0x3d98}

.fini_array section started  {0x3d98-0x3da0}
00003d98  void* __init_array_end = __do_global_dtors_aux
.fini_array section ended  {0x3d98-0x3da0}

.dynamic (DYNAMIC) section started  {0x3da0-0x3f90}
00003da0  struct Elf64_Dyn __elf_dynamic_table[0x1b] = 
00003da0  {
00003da0      [0x00] = 
00003da0      {
00003da0          enum e_dyn_tag d_tag = DT_NEEDED
00003da8          uint64_t d_val = 0x1
00003db0      }
00003db0      [0x01] = 
00003db0      {
00003db0          enum e_dyn_tag d_tag = DT_INIT
00003db8          uint64_t d_val = 0x1000
00003dc0      }
00003dc0      [0x02] = 
00003dc0      {
00003dc0          enum e_dyn_tag d_tag = DT_FINI
00003dc8          uint64_t d_val = 0x1348
00003dd0      }
00003dd0      [0x03] = 
00003dd0      {
00003dd0          enum e_dyn_tag d_tag = DT_INIT_ARRAY
00003dd8          uint64_t d_val = 0x3d90
00003de0      }
00003de0      [0x04] = 
00003de0      {
00003de0          enum e_dyn_tag d_tag = DT_INIT_ARRAYSZ
00003de8          uint64_t d_val = 0x8
00003df0      }
00003df0      [0x05] = 
00003df0      {
00003df0          enum e_dyn_tag d_tag = DT_FINI_ARRAY
00003df8          uint64_t d_val = 0x3d98
00003e00      }
00003e00      [0x06] = 
00003e00      {
00003e00          enum e_dyn_tag d_tag = DT_FINI_ARRAYSZ
00003e08          uint64_t d_val = 0x8
00003e10      }
00003e10      [0x07] = 
00003e10      {
00003e10          enum e_dyn_tag d_tag = DT_GNU_HASH
00003e18          uint64_t d_val = 0x3a0
00003e20      }
00003e20      [0x08] = 
00003e20      {
00003e20          enum e_dyn_tag d_tag = DT_STRTAB
00003e28          uint64_t d_val = 0x4e8
00003e30      }
00003e30      [0x09] = 
00003e30      {
00003e30          enum e_dyn_tag d_tag = DT_SYMTAB
00003e38          uint64_t d_val = 0x3c8
00003e40      }
00003e40      [0x0a] = 
00003e40      {
00003e40          enum e_dyn_tag d_tag = DT_STRSZ
00003e48          uint64_t d_val = 0xa2
00003e50      }
00003e50      [0x0b] = 
00003e50      {
00003e50          enum e_dyn_tag d_tag = DT_SYMENT
00003e58          uint64_t d_val = 0x18
00003e60      }
00003e60      [0x0c] = 
00003e60      {
00003e60          enum e_dyn_tag d_tag = DT_DEBUG
00003e68          uint64_t d_val = 0x0
00003e70      }
00003e70      [0x0d] = 
00003e70      {
00003e70          enum e_dyn_tag d_tag = DT_PLTGOT
00003e78          uint64_t d_val = 0x3f90
00003e80      }
00003e80      [0x0e] = 
00003e80      {
00003e80          enum e_dyn_tag d_tag = DT_PLTRELSZ
00003e88          uint64_t d_val = 0x90
00003e90      }
00003e90      [0x0f] = 
00003e90      {
00003e90          enum e_dyn_tag d_tag = DT_PLTREL
00003e98          uint64_t d_val = 0x7
00003ea0      }
00003ea0      [0x10] = 
00003ea0      {
00003ea0          enum e_dyn_tag d_tag = DT_JMPREL
00003ea8          uint64_t d_val = 0x688
00003eb0      }
00003eb0      [0x11] = 
00003eb0      {
00003eb0          enum e_dyn_tag d_tag = DT_RELA
00003eb8          uint64_t d_val = 0x5c8
00003ec0      }
00003ec0      [0x12] = 
00003ec0      {
00003ec0          enum e_dyn_tag d_tag = DT_RELASZ
00003ec8          uint64_t d_val = 0xc0
00003ed0      }
00003ed0      [0x13] = 
00003ed0      {
00003ed0          enum e_dyn_tag d_tag = DT_RELAENT
00003ed8          uint64_t d_val = 0x18
00003ee0      }
00003ee0      [0x14] = 
00003ee0      {
00003ee0          enum e_dyn_tag d_tag = DT_FLAGS
00003ee8          uint64_t d_val = 0x8
00003ef0      }
00003ef0      [0x15] = 
00003ef0      {
00003ef0          enum e_dyn_tag d_tag = DT_FLAGS_1
00003ef8          uint64_t d_val = 0x8000001
00003f00      }
00003f00      [0x16] = 
00003f00      {
00003f00          enum e_dyn_tag d_tag = DT_VERNEED
00003f08          uint64_t d_val = 0x5a8
00003f10      }
00003f10      [0x17] = 
00003f10      {
00003f10          enum e_dyn_tag d_tag = DT_VERNEEDNUM
00003f18          uint64_t d_val = 0x1
00003f20      }
00003f20      [0x18] = 
00003f20      {
00003f20          enum e_dyn_tag d_tag = DT_VERSYM
00003f28          uint64_t d_val = 0x58a
00003f30      }
00003f30      [0x19] = 
00003f30      {
00003f30          enum e_dyn_tag d_tag = DT_RELACOUNT
00003f38          uint64_t d_val = 0x3
00003f40      }
00003f40      [0x1a] = 
00003f40      {
00003f40          enum e_dyn_tag d_tag = DT_NULL
00003f48          uint64_t d_val = 0x0
00003f50      }
00003f50  }

00003f50  00 00 00 00 00 00 00 00  ........
00003f58  00 00 00 00 00 00 00 00  ........
00003f60  00 00 00 00 00 00 00 00  ........
00003f68  00 00 00 00 00 00 00 00  ........
00003f70  00 00 00 00 00 00 00 00  ........
00003f78  00 00 00 00 00 00 00 00  ........
00003f80  00 00 00 00 00 00 00 00  ........
00003f88  00 00 00 00 00 00 00 00  ........
.dynamic (DYNAMIC) section ended  {0x3da0-0x3f90}

.got (PROGBITS) section started  {0x3f90-0x4000}
00003f90  _GLOBAL_OFFSET_TABLE_:
00003f90  a0 3d 00 00 00 00 00 00  .=......

00003f98  int64_t data_3f98 = 0x0
00003fa0  int64_t data_3fa0 = 0x0
00003fa8  int32_t (* const puts)(char const* str) = puts
00003fb0  uint64_t (* const fread)(void* buf, uint64_t size, uint64_t count, FILE* fp) = fread
00003fb8  int32_t (* const fclose)(FILE* fp) = fclose
00003fc0  int32_t (* const printf)(char const* format, ...) = printf
00003fc8  int64_t (* const ftell)(FILE* fp) = ftell
00003fd0  FILE* (* const fopen)(char const* filename, char const* mode) = fopen
00003fd8  int64_t (* const _ITM_deregisterTMCloneTable)() = _ITM_deregisterTMCloneTable
00003fe0  void (* const __libc_start_main)(int32_t (* main)(int32_t argc, char** argv, char** envp), int32_t argc, char** ubp_av, void (* init)(), void (* fini)(), void (* rtld_fini)(), void* stack_end) __noreturn = __libc_start_main
00003fe8  int64_t (* const __gmon_start__)() = __gmon_start__
00003ff0  int64_t (* const _ITM_registerTMCloneTable)() = _ITM_registerTMCloneTable
00003ff8  void (* const __cxa_finalize)(void* d) = __cxa_finalize
.got (PROGBITS) section ended  {0x3f90-0x4000}

.data (PROGBITS) section started  {0x4000-0x4010}
00004000  __data_start:
00004000  00 00 00 00 00 00 00 00  ........

00004008  void* __dso_handle = __dso_handle
.data (PROGBITS) section ended  {0x4000-0x4010}

.bss (NOBITS) section started  {0x4010-0x4018}
00004010  char __TMC_END__ = 0x0

00004011     00 00 00 00 00 00 00   .......
.bss (NOBITS) section ended  {0x4010-0x4018}

.extern section started  {0x4020-0x4078}
00004020  extern _ITM_deregisterTMCloneTable
00004028  extern _ITM_registerTMCloneTable
00004030  extern void  __cxa_finalize(void* d)
00004038  extern __gmon_start__
00004040  extern void  __libc_start_main(int32_t (* main)(int32_t argc, char** argv, char** envp), int32_t argc, char** ubp_av, void (* init)(), void (* fini)(), void (* rtld_fini)(), void* stack_end) __noreturn
00004048  extern int32_t  fclose(FILE* fp)
00004050  extern FILE*  fopen(char const* filename, char const* mode)
00004058  extern uint64_t  fread(void* buf, uint64_t size, uint64_t count, FILE* fp)
00004060  extern int64_t  ftell(FILE* fp)
00004068  extern int32_t  printf(char const* format, ...)
00004070  extern int32_t  puts(char const* str)
.extern section ended  {0x4020-0x4078}

