// <username>
// <password> <getflag()0xaddress>

// echo 0 | sudo tee /proc/sys/kernel/randomize_va_space
// echo 2 | sudo tee /proc/sys/kernel/randomize_va_space

// Sample input for exploit:
// python3 -c "print(b'AAAAAA' + b'\x55\x65\x55\x56')"
// Note: The address will be different in each run

#include <iostream>
#include <string>
#include <stdio.h>  // scanf()
#include <string.h> // strcmp()
#include <ctype.h>  // bool

// #include <ctf.h>

using namespace std;

// extern "C" {
// void getflag(char loginid[], char Stage[]);
// }

typedef void (*functionPointer)(char lstring[], char rstring[]);

void validateLogin(char username[], char password[]);
void getflag(char lstring[], char rstring[]);

int valid = 0;

int main(){

    volatile functionPointer caller = validateLogin; // 4bytes

    char username[8] = {0}; // 8bytes
    char password[2] = {0}; // 2bytes

    cout << "|Welcome||||||||||||||||||" << endl;
    cout << "|Sign in as a valid user |" << endl;
    cout << "|Username:_> " << endl;
    scanf("%s", &username);
    cout << "|Password:_> " << endl;
    scanf("%s", &password);
    cout << "||||||||||||||||||||||||||" << endl;

    validateLogin(username, password);

    caller(username, password);

    if(valid == 1){
        cout << "|Valid credentials!|||||||" << endl;
        cout << "|Thank you for signing in|" << endl;
        cout << "||||||||||||||||||||||||||" << endl;
    }

    return 0;
}

void validateLogin(char username[], char password[]){

    if(valid != 0) return;
                          //ASLRado
    char validUsername[] = "adonay_";
                          //1
    char validPassword[] = "1";

    if((strcmp(username, validUsername) != 0) || (strcmp(password, validPassword) != 0)){
        cout << "|Invalid credentials!|||||" << endl;
        cout << "||||||||||||||||||||||||||" << endl;
        valid = -1;
        return;
    }

    valid = 1;
    return;
}

void getflag(char* lstring, char* rstring){
    cout << "getflag() called." << endl;
    return;
}
