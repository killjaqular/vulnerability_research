// echo 0 | sudo tee /proc/sys/kernel/randomize_va_space
// echo 2 | sudo tee /proc/sys/kernel/randomize_va_space

// Sample input for exploit:
// r <<< $(python2 -c 'print((b"adonay_") + b"\n" + (b"1") + b"\n" + b"\x6a\x4f\x40")')
// Note: The address will be different in each run

// compile like so:
// g++ -m32 -ggdb -fno-stack-protector main.cpp -o ASLRado

#include <iostream>
#include <string>
#include <stdio.h>  // scanf()
#include <string.h> // strcmp()
#include <ctype.h>  // bool

#include "ctf.h"

using namespace std;

typedef void (*functionPointer)(char lstring[], char rstring[]);

void validateLogin(char username[], char password[]);
void callGetFlag(char loginid[], char Stage[]);
extern "C" {void getflag(char loginid[], char Stage[]);}

int valid = 0;

int main(){

    volatile functionPointer caller = validateLogin; // 4bytes

    char callerBuffer[1] = {0}; // 1byte
    char password[2]     = {0}; // 2bytes
    char username[8]     = {0}; // 8bytes

    printf( "|Error in last function call:_> 0x%x\n", validateLogin);
    cout << "|Contact software vendor.|" << endl;
    cout << "||||||||||||||||||||||||||" << endl;
    cout << "|Welcome||||||||||||||||||" << endl;
    cout << "|Sign in as a valid user |" << endl;
    cout << "|Username:_> " << endl;
    scanf("%s", &username);
    cout << "|Password:_> " << endl;
    scanf("%s", &password);
    // This is to keep password buffer clean when passed to caller(username, password)
    scanf("%s", &callerBuffer);
    cout << "||||||||||||||||||||||||||" << endl;

    validateLogin(username, password);

    caller(username, password);

    if(valid == 1){
        cout << "|Valid credentials!|||||||" << endl;
        cout << "|Thank you for signing in|" << endl;
        cout << "||||||||||||||||||||||||||" << endl;
    }

    return 0;
}
void validateLogin(char username[], char password[]){

    if(valid != 0) return;
                          //ASLRado
    char validUsername[] = "adonay_";
                          //1
    char validPassword[] = "1";

    if((strcmp(username, validUsername) != 0) || (strcmp(password, validPassword) != 0)){
        cout << "|Invalid credentials!|||||" << endl;
        cout << "||||||||||||||||||||||||||" << endl;
        valid = -1;
        return;
    }

    valid = 1;
    return;
}

void callGetFlag(char loginid[], char Stage[]){
    printf("Calling getflag(%s, %s)\n", loginid, Stage);
    getflag(loginid, Stage);
    return;
}
